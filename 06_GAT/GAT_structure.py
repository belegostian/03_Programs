
...
pyg_graphs = []
...
for scenario in scenario_folders:
    ...
    edge_dict = {}
    ...
    for subscription in subscription_dict.values()
        combined_node_features = []
        ...
        node_features_tensor = torch.tensor(combined_node_features, dtype=torch.float)
        ...
        combined_edge_features = []
        ...
        edge_features_tensor = torch.tensor(combined_edge_features, dtype=torch.float)
        ...
        adjacency_index = []
        ...
        adjacency_index = torch.tensor(adjacency_index, dtype=torch.long).t().contiguous()
        ...
        qos_score = float(subscription['QoS Score'])
        qos_score_tensor = torch.tensor(qos_score, dtype=torch.float)
        
        data = Data(x=node_features_tensor, edge_index=adjacency_index, edge_attr=edge_features_tensor, y=qos_score_tensor)
        pyg_graphs.append(data)
        
train_val_graphs, test_graphs = train_test_split(pyg_graphs, test_size=0.2, random_state=42)
train_graphs, val_graphs = train_test_split(train_val_graphs, test_size=0.25, random_state=42)

train_loader = DataLoader(train_graphs, batch_size=36, shuffle=True)
val_loader = DataLoader(val_graphs, batch_size=36, shuffle=False)
test_loader = DataLoader(test_graphs, batch_size=36, shuffle=False)